= Getting Started with _OpenShift_ v3
////
OpenShift is Red Hat's open source PaaS platform. OpenShift v3 (due to be released this year) will provide a holistic experience on running your microservices using Docker and Kubernetes. All the work is done in the open source at OpenShift Origin. OpenShift v3 uses a new platform stack that is using plenty of community projects where Red Hat contributes such as Fedora, Centos, Docker, Project Atomic, Kubernetes, and OpenStack.

This talk will explain how to get started with OpenShift v3. Attendees will learn how to take a simple Java EE application and get it running on OpenShift v3. The talk will also explain how to port existing Docker and Kubernetes applications to OpenShift v3. and the complete push-to-production lifecycle. The talk will also show how to dynamically scale applications and leverage self-healing functions of Kubernetes in OpenShift.
////
Vineet Reynolds; Red Hat
:license: CC BY-SA 4.0
include::attributes.adoc[]


[.topic.intro]
== Who am I ?

== !

*What does this talk cover ?*

[.incremental]
* Docker and Kubernetes
* OpenShift v3

== !

[.statement]
*Docker and Kubernetes* +
for the uninitiated

[.topic.source]
== Containers

* Provide a light-weight _virtualization_ solution
* Through the use of Linux kernel features -
 ** `cgroups` to share/limit hardware resources
 ** `namespaces` to provide isolation
* without requiring a guest OS

[.topic.source]
== Containers

image::DockerVsVMs.png[Docker vs Virtual Machines,role="middle"]

[.topic.source]
== Docker

Docker is a shipping container system for code. Consists of - 

* A portable, lightweight runtime and packaging tool (_Docker Engine_)
* A cloud service for sharing applications and automating workflows (_Docker Hub_)

[.topic.source]
== Basics of the Docker system

image::basics-of-docker-system.png[Basics of the Docker system,640,role="middle"]

[.topic.source]
== Changing and Updating images

image::changes-and-updates.png[Changing images and updating them in production,640,role="middle"]

[.topic.source]
== Kubernetes

* Supports *runtime and operational management of containers*
* Describes the *intended state of the cluster*
 ** Record links between containers - 'frontend' depends on 'backend'
 ** Replicate containers onto the desired number of nodes; 'frontend' should always run on X nodes, 'backend' should run only on 1 node
* Provides self-healing capabilities to *repair the cluster to intended state*

[.topic.source]
== Kubernetes

* Solves the _Cluster Container Management_ problem
 ** the substrate for running containers at scale
 ** contains just the runtime and operational tools for containers
 ** Composable system - only enough to enable other use cases

[.topic.source]
== Concepts - Pods and Containers

* Fundamental unit in the system
 ** Pod is a group of related containers on the same system
 ** Each container can be its own image with its own env
 ** Pods share an IP address and data volumes
* Pods are "transient"
 ** Pods should be able to be deleted at any time
 ** Storage can be detached and reattached elsewhere
 ** Different pods talk to each other through abstractions

[.topic.source]
== Concepts - Pods Examples

* Single container - *JBoss*, *MySQL* etc.
* *Web server* and *log parser*
 ** Web server container logs HTTP requests to disk
 ** Log parser reads from disk and sends summary info elsewhere

[.topic.source]
== Concepts - Pods (contd.)

image::pods.png[Pods,640,role="middle"]


[.topic.source]
== Connecting Pods

* Need a way for *pod A to talk to pod B*
 ** Option 1: Hardcode IP address
 ** Option 2: Query the server
* If there are 10 copies of pod A, which do you use?
 ** Pick one randomly?
 ** Load balance!
* What if it fails?
 ** Want to have all copies of pod A talk to all copies of pod B


[.topic.source]
== Services

* *Abstract a set of pods* as a single IP and port
 ** Each host has a proxy that knows where other pods are
 ** Simple TCP/UDP load balancing
 ** No central load balancer (no SPOF)
* Creates environment variables in other pods
 ** Like "docker link", but across hosts
 ** Service named "mysql" gets `MYSQL_HOST` and `MYSQL_PORT`


[.topic.source]
== Services(contd.)

image::services.png[Services,640,role="middle"]

[.topic.source]
== Why Services?

* Stable endpoint for pods to reference
 ** Allows list of pods to change dynamically
* Need a way to know where other pods are
 ** By *name* (mysql is recognizable)
 ** Simple service discovery 
* Lots of other options for service discovery
 ** The simplest thing that works at scale


[.topic.source]
== OpenShift

OpenShift adds

* Ability to build, manage, and deliver app descriptions at scale
* Turning source code into new deployable components
* Lifecyle to applications - Build, deploy, manage, promote

[.topic.source]
== OpenShift

OpenShift extends Kubernetes:

* To provide application templates
 ** Single JSON file to configure Kube resources
 ** Parameterizable
* To build images from source code
 ** Host source code in git repos
 ** Performs builds and host private Docker images
 ** Kicks off new builds on updates to git repos

[.topic.source]
== OpenShift - What is an app?

* One or more set of pods
 ** JBoss, MySQL, Redis, ActiveMQ, Backend Workers, Frontends
* Linked together by services
 ** Edge router for myapp.com -> JBoss frontend pods
 ** JBoss frontend pods -> MySQL service
 ** MySQL service -> MySQL pod with attached storage

[.topic.source]
== OpenShift

* Turning source code into new deployable components
* Lifecyle to applications - Build, deploy, manage, promote

== !

[.statement]
Getting started with +
*OpenShift*

[.topic.source]
== Setup

* Setup Docker
 ** On Fedora
+
[source,bash]
----
sudo yum -y install docker
----
 ** On Ubuntu Trusty 14.04
+
[source,bash]
----
wget -qO- https://get.docker.com/ | sh
----
 ** Use Boot2Docker on Mac/Windows
 ** But, using a Linux VM is preferable

[.topic.source]
== Download OpenShift Binaries

* Download the binaries from GitHub icon:github[]
 ** https://github.com/openshift/origin/releases/tag/v0.4[0.4 - Beta2] is recommended

== !

[.statement]
*Starting OpenShift*

[.topic.source]
== The `openshift` executable

Start OpenShift.

[source,bash]
----
sudo openshift start &> logs/openshift.log &
----

[.topic.source]
== The `openshift` executable

Starts various components

* The Kubernetes master
* A kubelet
* The OpenShift master
* An `etcd` server
* Controllers

[.topic.source]
== The state of the cluster

image::openshift_all_in_one.png[OpenShift components,480,role="middle"]

[.topic.source]
== Launching the OpenShift UI

Configure the client for TLS

[source,console]
----
export KUBECONFIG=`pwd`/openshift.local.certificates/admin/.kubeconfig
export CURL_CA_BUNDLE=`pwd`/openshift.local.certificates/ca/cert.crt
sudo chmod +r "$KUBECONFIG"
----

* The `.kubeconfig` file is used by `osc`.
* The CA cert is used by `curl`.

[.topic.source]
== Launching the OpenShift UI

Bind a user `test-admin` to the `view` role

[source,console]
----
openshift ex policy add-user view anypassword:test-admin
----

* Launch the OpenShift UI @ `http://localhost:8444/console`
* Log in with the `test-admin` user. Specify any password.

[.topic.source]
== Deploying the registry

* Images to be deployed in production can be hosted in a registry
* This is available as a Docker image, can be deployed through a command:

[source,console]
----
openshift ex registry --create --credentials="$KUBECONFIG"
----

[.topic.source]
== Deploying the registry

Verify the registry is up and running.

[source,console]
----
osc describe service docker-registry
----

[source,console]
----
curl `osc get service docker-registry --template="{{ .portalIP }}:{{ .port }}"`
----

== !

[.statement]
*Creating the project*
on OpenShift

[.topic.source]
== Creating a new project

* Create a new project

[source,console]
----
openshift ex new-project test --display-name="OpenShift 3 Sample" --description="This is an example project to demonstrate OpenShift v3" --admin=anypassword:test-admin
----

* Submit the application template for processing

[source,console]
----
osc process -n test -f application-template-jeebuild.json | osc create -n test -f -
----

[.topic.source]
== Creating a new project

By now, the following OpenShift entities have been created:

* An OpenShift build config
* ImageStreams for images used (the base) and created (the production images)
* DeploymentConfigs to define the deployments after build
* Services for the deployments performed as output of build

[.topic.source]
== Building the application

* Trigger a build

[source,console]
----
osc start-build -n test jee-sample-build
----

* Observe the build

[source,console]
----
osc get -n test builds
osc get -n test builds --watch
osc build-logs -n test <BUILD_ID>
----

[.topic.source]
== Accessing the application (finally!)

Query for pods and services, once the build is complete

[source,console]
----
osc get -n test pods
----

[source,console]
----
osc get -n test services
----

* The `IP:port` can be found in the frontend and database services.
* Use the browser to access the frontend, and MySQL workbench to access the database.


[.topic.recap]
== Recap

OpenShift
====
* offers a lightweight virtualization solution
* links various components of your project together
* stores the intended state of your application for the cluster
* provides tight-knit integration for devs and ops alike
====


[.topic.ending, hrole="name"]
== !

[.footer]
Questions?