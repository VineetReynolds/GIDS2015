= _Microservices_ Design Patterns for _Java Applications_
////
Microservices allow to decompose a monolithic application into cohesive and multiple decoupled services. Each service is running in its own process and communicates using lightweight mechanisms, such as HTTP API. These services are built around business capabilities or functional decomposition. Microservice also enables true polyglot architecture - both in terms of language and data. It truly allows you to employ the right tool for the right job. Each service is independently deployable and lends very well to fully automated deployment machinery.

Can you take an existing Java EE application and decompose it into microservices? What tools are required to enable CI/CD? What are different design patterns for microservices? What tools do you need to manage such services? Is the complexity being pushed around from service implementation to orchestration?
This talk will explain some of these concerns and provide guidance on how to leverage microservices in your Java applications.
////
Vineet Reynolds; Red Hat
:license: CC BY-SA 4.0
include::attributes.adoc[]

[.topic.intro]
== Who am I ?

== !

*What does this talk cover ?*

[.incremental]
* MicroServices - a brief introduction
 ** The monolith
 ** Decomposing monoliths
* Patterns
 ** Aggregator
 ** Proxy
 ** Chained services
 ** Branch
 ** Shared data
 ** Asychronous messaging

[.topic.source]
== The monolith

image::monolith-internals.png[Internals of a monolith,480,role="middle"]

[.topic.source]
== The monolith

image::monolith-deployment.png[Deploying monoliths,480,role="middle"]

[.topic.source]
== The monolith

* Do they have *advantages* ? Oh yes.
 ** Packaged and deployed as a _single unit_. Relative ease of rolling back from failure.
 ** _Homogenous_ design - could be a good thing to counter chaos.
 ** _Easy_ to test - services are always available.
 ** _Simple_ to develop - single codebase.
 ** Easy to _scale_ horizontally.
 ** _Organize operations_ around a single team.

[.topic.source]
== The monolith

* Do they have *disadvantages* ? Oh, yes, a lot more.
 ** _Long_ deployment cycles (lasting hours or even days)
 ** May not use the _right_ framework/tool/language for each domain
 ** Acquires too many _responsibilities_ over time

[.topic.source]
== Microservices

Characteristics

* Many smaller (fine grained), clearly scoped services
 ** Single Responsibility Principle (`S` in `SOLID`, but for services)
 ** Independently managed
* Clear ownership for each service
 ** Independently deployable, leading easily to CI+CD
 ** Typically need/adopt the "DevOps" model


[.topic.source]
== What are Microservices?

* Hipster _SOA_?
* Fine-grained _SOA_?
* Focus on ESBs in _SOA_?
* _SOA_ done right?

[.topic.source]
== Decomposing the monolith into services

* Verb or usecase - e.g. Checkout UI
* Noun - e.g. Catalog product service
* Single Responsible Principle - e.g. Unix utilities

== !

[.statement]
*Microservices Patterns*

[.topic.source]
== Aggregator

image::microservices-aggregator-1024x528.png[Aggregator,480,role="middle"]

[.topic.source]
== Aggregator

* Similar to an API gateway.
* Provides a simple interface to a complex system.
* Can tranform data from downstream services.

[.topic.source]
== Proxy

image::microservices-proxy-1024x525.png[Aggregator,480,role="middle"]

[.topic.source]
== Proxy

* Similar to the aggregator.
* Proxies _don't aggregate_; they merely _delegate_ to a downstream service.
* A smart proxy, may transform data from downstream responses.

[.topic.source]
== Chained services

image::microservices-chain-1024x575.png[Aggregator,480,role="middle"]

[.topic.source]
== Chained services

* Commonly used when _business workflows_ are to be modelled in service interactions.
* Each service adds value in the transaction.
* Asynchronosity may need to be introduced in long-running transactions; use in combination with _asynchronous messaging_.

[.topic.source]
== Branch

image::microservices-branch-1024x639.png[Branch,480,role="middle"]

[.topic.source]
== Branch

* Similar to the _Content-based Router_ pattern.
* Requests/Messages are routed based on content like URL, headers or request body.
* Different downstream services exist due to siloed nature of business operations.
* _Data_ may be siloed, in conjunction with _processing logic_, at downstream services.

[.topic.source]
== Shared data

image::microservices-branch-shared-data-1024x634.png[Shared data,480,role="middle"]


[.topic.source]
== Shared data

* _Susceptible to mis-use_; can devolve to an anti-pattern.
* _Locking_ and _transactional semantics_ may be unclear.
* Much _safer to use_ when semantics are _understood_.
* Perfect when shared data is _read-only_.
* _Necessary_ when microservices are strongly coupled to avoid _data duplication_.

[.topic.source]
== Asynchronous messaging

image::microservices-async-messaging-1024x640.png[Asynchronous messaging,480,role="middle"]


[.topic.source]
== Asynchronous messaging

* Preferred way to _update_ data not _owned_ by a service.
* Instead, _publish events_ to the owning service.
* Eventually, leads to patterns like _event sourcing_.

[.topic.ending, hrole="name"]
== !

[.footer]
Questions?