= Scaling _Java Applications_ using _Docker_
////
Once you start using Docker containers, one of the next steps is to scale and cluster containers across multiple hosts. Applications however need to be designed to take advantage of the scaling and cluster management features afforded in the Docker ecosystem. A Docker container is expected to run only a single process. This model shines when scaling out the app to meet performance and availability guarantees.
This talk explores the constraints imposed on developers by the single process model. It will start with a demo of clustering a Java EE app using Docker and Kubernetes. The talk will proceed to cover features of Java application servers, notably that of cluster node discovery, that aids in scaling containerized Java apps. It explains how configuration management should be carefully addressed to avoid issues arising from the use of ephemeral stores. Finally it would delve into how the app can magically autoscale through resizing the cluster on varying loads.
////
Vineet Reynolds; Red Hat
:license: CC BY-SA 4.0
include::attributes.adoc[]


[.topic.intro]
== Who am I ?

== !

*What does this talk cover ?*

[.incremental]
* Docker
* Scaling applications
* Kubernetes

== !

[.statement]
*Docker* +
for the uninitiated

[.topic.source]
== Containers

* Provide a light-weight _virtualization_ solution
* Through the use of Linux kernel features -
 ** `cgroups` to share/limit hardware resources
 ** `namespaces` to provide isolation
* without requiring a guest OS

[.topic.source]
== Containers

image::DockerVsVMs.png[Docker vs Virtual Machines,role="middle"]

[.topic.source]
== Docker

Docker is a shipping container system for code. Consists of - 

* A portable, lightweight runtime and packaging tool (_Docker Engine_)
* A cloud service for sharing applications and automating workflows (_Docker Hub_)

[.topic.source]
== Basics of the Docker system

image::basics-of-docker-system.png[Basics of the Docker system,640,role="middle"]

[.topic.source]
== Let's run a container

* Run a Java EE app in a Docker container

[source,console]
----
docker run -d -p 8080:8080 vineetreynolds/badwildflycluster
----

[.topic.source]
== Try to address HA

* Run the same image in another Docker container

[source,console]
----
docker run -d -p 9080:8080 vineetreynolds/badwildflycluster
----

== !

[.statement]
*Defining the cluster*

[.topic.source]
== Defining the cluster

* First, node discovery
 ** JBoss EAP handles this with JGroups
 ** JGroups ensures _nodes are discovered_
 ** Solutions will be similar for other application servers

[.topic.source]
== Replicating state

* Then, replicate state to handle failover
 ** JBoss EAP handles this with Infinispan
 ** Infinispan ensures atleast _one replica_ for _shared data_

[.topic.source]
== Running the app at scale

[source,console]
----
docker run -d -p 8080:8080 vineetreynolds/wildflycluster
docker run -d -p 9080:8080 vineetreynolds/wildflycluster
----

[.topic.source]
== What about persistent data?

* Use database containers
 ** Store the data on _volumes mounted on the host_
* Link database containers to application servers
 ** Exposes database info to linked containers for usage

Example:

[source,console]
----
docker run --name mysqldb -e MYSQL_USER=mysql -e MYSQL_PASSWORD=mysql -e MYSQL_DATABASE=sample -e MYSQL_ROOT_PASSWORD=supersecret -d mysql
----
[source,console]
----
docker run --name mywildfly --link mysqldb:db -p 8080:8080 -d vineetreynolds/wildflycluster
----

== !

[.statement]
This is now looking +
*fragile !*


[.topic.source]
== Kubernetes

* Supports _runtime and operational management of containers_
* Describes the _intended state of the cluster_
 ** Record links between containers - 'frontend' depends on 'backend'
 ** Replicate containers onto the desired number of nodes; 'frontend' should always run on X nodes, 'backend' should run only on 1 node
* Provides _self-healing capabilities_ to repair the cluster to intended state

[.topic.source]
== Kubernetes

* Solves the _Cluster Container Management_ problem
 ** the substrate for running containers at scale
 ** contains just the runtime and operational tools for containers
 ** Composable system - only enough to enable other use cases

[.topic.source]
== Concepts - Pods and Containers

* Fundamental unit in the system
 ** Pod is a group of related containers on the same system
 ** Each container can be its own image with its own env
 ** Pods share an IP address and data volumes
* Pods are "transient"
 ** Pods should be able to be deleted at any time
 ** Storage can be detached and reattached elsewhere
 ** Different pods talk to each other through abstractions

[.topic.source]
== Concepts - Pods Examples

* Single container - _JBoss_, _MySQL_ etc.
* _Web server_ and _log parser_ (one pod, two containers)
 ** Web server container logs HTTP requests to disk
 ** Log parser reads from disk and sends summary info elsewhere

[.topic.source]
== Concepts - Pods (contd.)

image::pods.png[Pods,640,role="middle"]


[.topic.source]
== Services

* Abstract a set of pods as a single IP and port
 ** Each host has a proxy that knows where other pods are
 ** Simple TCP/UDP load balancing
 ** No central load balancer (no SPOF)
* Creates environment variables in other pods
 ** Like "docker link", but across hosts
 ** Service named "mysql" gets `MYSQL_HOST` and `MYSQL_PORT`


[.topic.source]
== Services(contd.)

image::services.png[Services,640,role="middle"]

== !

[.statement]
*Scaling* +
applications in Kubernetes

[.topic.source]
== Scaling with Replicas

* Replication controllers allow running multiple pods on multiple minions
* Define the number of pods in the intended state
* Kubernetes takes care of replicating the pods

[.topic.source]
== The Kubernetes solution

.clustering-controller.json
[source,json]
----
        ....
        "podTemplate": {
            "desiredState": {
                "manifest": {
                    "id": "wildfly",
                    "version": "v1beta1",
                    "containers": [
                        {
                            "image": "vineetreynolds/wildflycluster",
                            "name": "wildfly-container",
        ....
----

[.topic.source]
== The Kubernetes solution

How many replicas?

.clustering-controller.json
[source,json]
----
    ....
    "desiredState": {
        "replicas": 2,
        "replicaSelector": {
            "name": "wildfly"
        },
    ....
----

[.topic.source]
== The Kubernetes solution

Creating the replica

[source,console]
----
kubectl create -f clustering-controller.json
----

== !

[.statement]
Where's +
*the catch?*

[.topic.source]
== Scaling with Replicas - Problems

* External access to the cluster
 ** Pods are transient, and therefore ...
 ** Update _external load balancers_ or _edge routers_ with _updated cluster state_
 ** What should be done -
  *** when a container goes down ? _Notify_ the load balancer
  *** when a container is added ? _Notify_ the load balancer
 ** Cloud providers solve this out of the box - GCE/OpenShift
 ** Refer the `createExternalLoadBalancer` flag for Kube services

== !

[.statement]
*Autoscaling*

[.topic.source]
== Autoscaling

* Applications experience _peaks and valleys in usage_
* Operators _scale up_ resources _on demand_
* Currently, a feature in progress in Kubernetes
* Resource scaling will be _driven by data_ from input sources
* Scope is _horizontal scaling_ for now

[.topic.source]
== Autoscaling

* Scaling based on _traffic_
* Scaling based on _predictive analysis_
* Scaling based on arbitrary data points - _job execution time_, _number of sessions_ etc.

[.topic.ending, hrole="name"]
== !

[.footer]
Questions?